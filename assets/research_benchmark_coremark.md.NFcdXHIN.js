import{_ as e,o as t,c as a,R as r}from"./chunks/framework.OBNbGUgv.js";const _=JSON.parse('{"title":"coremark","description":"","frontmatter":{},"headers":[],"relativePath":"research/benchmark/coremark.md","filePath":"research/benchmark/coremark.md","lastUpdated":1704004113000}'),d={name:"research/benchmark/coremark.md"},s=r('<h1 id="coremark" tabindex="-1">coremark <a class="header-anchor" href="#coremark" aria-label="Permalink to &quot;coremark&quot;">​</a></h1><h2 id="used-coremark" tabindex="-1">used coremark <a class="header-anchor" href="#used-coremark" aria-label="Permalink to &quot;used coremark&quot;">​</a></h2><p><a href="https://github.com/wasm3/wasm-coremark" target="_blank" rel="noreferrer">https://github.com/wasm3/wasm-coremark</a> coremark-minimal.wasm</p><p>coremark-minimal.wasmはwasm3公式のCoremarkのwebassembly移植版で，coremark-minimal版はcoremark本体にwasmで使えるための改変が施されている(coremark.wasm,coremark-emcc.wasmはそのままビルド)</p><p>READMEより</p><blockquote><p>minimal build is more complex, and requires modification of core_main.c.</p></blockquote><p>coremark-minimal.wasmを逆アセンブルして見ると，線形メモリの消費は1ページのみであり，対象とするすべてのマイコンで<code>memory allocation failed</code>にならず測定できる可能性が高い</p><h2 id="測定結果" tabindex="-1">測定結果 <a class="header-anchor" href="#測定結果" aria-label="Permalink to &quot;測定結果&quot;">​</a></h2><p>details : <a href="https://github.com/project-mahiwa/mahiwa-backend/issues/99" target="_blank" rel="noreferrer">https://github.com/project-mahiwa/mahiwa-backend/issues/99</a></p><table><thead><tr><th>MCU</th><th>SoC</th><th>CPU frequency</th><th>Architecture</th><th>Mahiwa v0.2.1 result</th><th>Soc official reference</th><th>Soc official datasheet</th></tr></thead><tbody><tr><td>M5 Stack Core2</td><td>ESP32-D0WDQ6-V3</td><td>240MHz</td><td>Xtensa</td><td>8.5663108826</td><td>1 core at 240 MHz: 504.85</td><td><a href="https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf" target="_blank" rel="noreferrer">https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf</a></td></tr><tr><td>Seed Studio ESP32C3</td><td>ESP32-C3 (Maybe ESP32-C3FH4)</td><td>160MHz</td><td>RISC-V</td><td>16.8757381439</td><td>null</td><td><a href="https://www.espressif.com/sites/default/files/documentation/esp32-c3_technical_reference_manual_en.pdf" target="_blank" rel="noreferrer">https://www.espressif.com/sites/default/files/documentation/esp32-c3_technical_reference_manual_en.pdf</a></td></tr><tr><td>RaspberryPi Pico W</td><td>RP2040</td><td>125MHz</td><td>Arm</td><td>測定終わらず</td><td>null</td><td><a href="https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf" target="_blank" rel="noreferrer">https://datasheets.raspberrypi.com/rp2040/rp2040-datasheet.pdf</a></td></tr><tr><td>ATOM Matrix</td><td>ESP32-PICO-D4</td><td>240MHz</td><td>Xtensa</td><td>8.5703153610</td><td>null</td><td><a href="https://www.espressif.com/sites/default/files/documentation/esp32-pico_series_datasheet_en.pdf" target="_blank" rel="noreferrer">https://www.espressif.com/sites/default/files/documentation/esp32-pico_series_datasheet_en.pdf</a></td></tr><tr><td>ATOMS3</td><td>ESP32-S3FN8</td><td>240MHz</td><td>Xtensa</td><td>10.0710000992</td><td>1 core at 240 MHz: 613.86</td><td><a href="https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf" target="_blank" rel="noreferrer">https://www.espressif.com/sites/default/files/documentation/esp32-s3_datasheet_en.pdf</a></td></tr><tr><td>M5Stamp C3U</td><td>ESP32-C3FH4</td><td>160MHz</td><td>RISC-V</td><td>16.8757381439</td><td>null</td><td><a href="https://www.espressif.com/sites/default/files/documentation/esp32-c3_technical_reference_manual_en.pdf" target="_blank" rel="noreferrer">https://www.espressif.com/sites/default/files/documentation/esp32-c3_technical_reference_manual_en.pdf</a></td></tr></tbody></table>',10),o=[s];function c(i,n,m,l,h,p){return t(),a("div",null,o)}const u=e(d,[["render",c]]);export{_ as __pageData,u as default};
