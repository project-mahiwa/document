import{_ as e,c as a,o as t,V as o}from"./chunks/framework.Sh1CwOYD.js";const _=JSON.parse('{"title":"Troubleshooting Go","description":"","frontmatter":{},"headers":[],"relativePath":"reference/developer/troubleshooting/go.md","filePath":"reference/developer/troubleshooting/go.md","lastUpdated":1707784745000}'),n={name:"reference/developer/troubleshooting/go.md"},s=o('<h1 id="troubleshooting-go" tabindex="-1">Troubleshooting Go <a class="header-anchor" href="#troubleshooting-go" aria-label="Permalink to &quot;Troubleshooting Go&quot;">​</a></h1><p>Goプログラミングのトラブルシューティング</p><p>よくある質問は<a href="/research/qa/">こちら</a></p><h2 id="tinygo-wasm-ld-warning-function-signature-mismatch" tabindex="-1">tinygo:wasm-ld: warning: function signature mismatch: <a class="header-anchor" href="#tinygo-wasm-ld-warning-function-signature-mismatch" aria-label="Permalink to &quot;tinygo:wasm-ld: warning: function signature mismatch:&quot;">​</a></h2><h2 id="target-jsonのldflgasの設定について" tabindex="-1">target.jsonのldflgasの設定について <a class="header-anchor" href="#target-jsonのldflgasの設定について" aria-label="Permalink to &quot;target.jsonのldflgasの設定について&quot;">​</a></h2><ul><li>ldflagsはビルド時に内部で呼ばれる引数</li><li>TinyGoではLLVMが採用されているので，LLVMのオプションを指定する形になる．</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>ldflgas=&quot;-help&quot;</span></span></code></pre></div><p>にしてbuildすることでオプションの全表示が可能．</p>',8),i=[s];function r(l,c,d,g,h,u){return t(),a("div",null,i)}const m=e(n,[["render",r]]);export{_ as __pageData,m as default};
