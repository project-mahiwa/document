import{_ as a,o as i,c as e,R as s}from"./chunks/framework.OBNbGUgv.js";const k=JSON.parse('{"title":"よくある質問","description":"","frontmatter":{},"headers":[],"relativePath":"research/qa/index.md","filePath":"research/qa/index.md","lastUpdated":1707287376000}'),t={name:"research/qa/index.md"},n=s(`<h1 id="よくある質問" tabindex="-1">よくある質問 <a class="header-anchor" href="#よくある質問" aria-label="Permalink to &quot;よくある質問&quot;">​</a></h1><p>トラブルシューティングは<a href="/reference/developer/troubleshooting/">こちら</a></p><h2 id="printintとprintlongで表せる数が同じなのはなぜか" tabindex="-1">printIntとprintLongで表せる数が同じなのはなぜか <a class="header-anchor" href="#printintとprintlongで表せる数が同じなのはなぜか" aria-label="Permalink to &quot;printIntとprintLongで表せる数が同じなのはなぜか&quot;">​</a></h2><p>Cの仕様で，intとlongの表せる範囲が同じになっている． 詳細：<a href="https://learn.microsoft.com/ja-jp/cpp/c-language/cpp-integer-limits?view=msvc-170" target="_blank" rel="noreferrer">https://learn.microsoft.com/ja-jp/cpp/c-language/cpp-integer-limits?view=msvc-170</a></p><p>同じ範囲だが分けて関数を用意している理由は，型のチェックでコンパイルエラーになることを防ぐためである(Arduino関数にはintを返すものとlongを返すものが混在しているため)</p><h2 id="goでgoでなくtinygoでビルドするのはなぜか" tabindex="-1">GoでGoでなくTinyGoでビルドするのはなぜか <a class="header-anchor" href="#goでgoでなくtinygoでビルドするのはなぜか" aria-label="Permalink to &quot;GoでGoでなくTinyGoでビルドするのはなぜか&quot;">​</a></h2><p>Go1.21からWebAssemblyへのコンパイルに対応した。 <code>//go:wasmimport env fib</code> のようにつけると関数のエクスポートができるが、import用の仕組みは未対応などまだ発展途上の段階である。</p><p>またMahiwaではマイコンをターゲットをしており、厳しい制限の中で利用する必要がある。</p><p>これらを踏まえてMahiwaではTinyGoからのWebAssemblyコンパイルとした。</p><p>TinyGoも本来であればLLVMのtargetでwasm32-unknown-unknownを指定したいが，<a href="https://github.com/tinygo-org/tinygo/issues/3068" target="_blank" rel="noreferrer">TinyGoのIssueにもある通り</a>それがまだ実現できていないのでやむを得ずwasm(wasm32-unknown-wasi)を利用しているを利用している．</p><p>TinyGoではwasiとwasmをtargetで指定できるが，内部的にはどちらもLLVMのターゲットをwasm32-unknown-wasiとしているため，現行最新のTinyGo 0.30の時点ではwasmを指定することを推奨している．</p><h2 id="rustやgoなどutf-8な文字コードに依存した環境で文字列を使用して問題ないか" tabindex="-1">RustやGoなどUTF-8な文字コードに依存した環境で文字列を使用して問題ないか <a class="header-anchor" href="#rustやgoなどutf-8な文字コードに依存した環境で文字列を使用して問題ないか" aria-label="Permalink to &quot;RustやGoなどUTF-8な文字コードに依存した環境で文字列を使用して問題ないか&quot;">​</a></h2><p>UTF-8にはASCIIとの互換性が有り，数値やアルファベットであれば問題なく動作する． 一方で日本語や絵文字などは問題となり，</p><div class="language-rust vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">rust</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;😀&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>のようなコードは，<code>cargo build --release</code>でコンパイルは通り，シリアル通信でも</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mahiwa</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WebAssembly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launch</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">😀</span></span></code></pre></div><p>上記のように出力できる←想定外</p><p>確実なのはASCIIで表現できる文字だが，一応UTF8の4byte文字でも出力できるっぽい？</p><h2 id="goのgoroutineはどうなる" tabindex="-1">Goのgoroutineはどうなる？ <a class="header-anchor" href="#goのgoroutineはどうなる" aria-label="Permalink to &quot;Goのgoroutineはどうなる？&quot;">​</a></h2><p>WebAssemblyは並列実行できない．</p><h2 id="tinygoの機能を使うとどうなる" tabindex="-1">TinyGoの機能を使うとどうなる？ <a class="header-anchor" href="#tinygoの機能を使うとどうなる" aria-label="Permalink to &quot;TinyGoの機能を使うとどうなる？&quot;">​</a></h2><h2 id="wasiを使うとどうなる" tabindex="-1">WASIを使うとどうなる？ <a class="header-anchor" href="#wasiを使うとどうなる" aria-label="Permalink to &quot;WASIを使うとどうなる？&quot;">​</a></h2><h2 id="llvmではだめなのか" tabindex="-1">LLVMではだめなのか <a class="header-anchor" href="#llvmではだめなのか" aria-label="Permalink to &quot;LLVMではだめなのか&quot;">​</a></h2><p>たしかにLLVMも多くの言語から多くのターゲットへの書き込みができる． 中間表現のLLVM IRでは最適化も期待できる．</p><p>LLVMを採用するメリット</p><p>実際，TinyGoではLLVMが用いられている</p><p>しかし</p><ul><li>ライブラリをフロントエンドの言語側に持つ必要がある</li><li>C/C++でのライブラリ資産を活かしにくい</li><li>LLVMのバックエンドにないマイナーなマイコンに対応できない可能性がある</li></ul><p>の観点からWebAssemblyを用いている．</p><p>またLLVMは既にTinyGoという事例がある点も大きく，WebAssemblyでは実用的に可能かを検討したいという意味もある．</p>`,30),o=[n];function r(l,p,h,c,d,g){return i(),e("div",null,o)}const m=a(t,[["render",r]]);export{k as __pageData,m as default};
